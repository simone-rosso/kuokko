{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["searchClient","algoliasearch","CustomHits","connectHits","hits","Grid","container","spacing","style","flexGrow","map","hit","item","xs","md","lg","key","objectID","Card","height","CardActionArea","CardMedia","component","image","title","name","CardContent","Typography","gutterBottom","variant","Highlight","attribute","color","className","price","Header","Paper","SearchBox","VoiceSearch","App","InstantSearch","indexName","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6WAOMA,G,OAAeC,IACnB,aACA,qCAGIC,EAAaC,aAAY,gBAAGC,EAAH,EAAGA,KAAH,OAC7B,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,MAAO,CAACC,SAAS,IAC1CL,EAAKM,KAAI,SAAAC,GAAG,OACX,kBAACN,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,IAAKL,EAAIM,UACvC,kBAACC,EAAA,EAAD,CAAMV,MAAO,CAACW,OAAO,MACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,UAAU,MACVH,OAAQ,IACRI,MAAOZ,EAAIY,MACXC,MAAOb,EAAIc,OAEb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKP,UAAU,MAC9C,kBAACQ,EAAA,EAAD,CAAWC,UAAU,OAAOpB,IAAKA,KAEnC,kBAACgB,EAAA,EAAD,CAAYE,QAAQ,QAAQG,MAAM,gBAAgBV,UAAU,KAC1D,kBAACQ,EAAA,EAAD,CAAWC,UAAU,cAAcpB,IAAKA,KAE1C,yBAAKsB,UAAU,aAAf,IAA6BtB,EAAIuB,kBASzCC,EAAS,kBACb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,QAoBWC,MAff,WACE,OACE,kBAACC,EAAA,EAAD,CACEC,UAAU,iBACVzC,aAAcA,GAEb,kBAAC,EAAD,MACA,kBAAC0C,EAAA,EAAD,KACG,kBAACxC,EAAD,SC5CUyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.36dbbc17.chunk.js","sourcesContent":["import React from 'react';\nimport algoliasearch from 'algoliasearch/lite';\n// @ts-ignore\nimport { InstantSearch, SearchBox, VoiceSearch, Highlight, connectHits } from 'react-instantsearch-dom';\nimport {Grid, Card, CardActionArea, CardMedia, CardContent, Typography, Paper, Container } from '@material-ui/core';\nimport './App.css';\n\nconst searchClient = algoliasearch(\n  '0TJ4I2JOET',\n  'f70294b40e001364d7667bdbf5ee13a1'\n);\n\nconst CustomHits = connectHits(({ hits }) => (\n  <Grid container spacing={5} style={{flexGrow:1}}>\n    {hits.map(hit => (\n      <Grid item xs={6} md={4} lg={3} key={hit.objectID}>\n        <Card style={{height:500}}>\n          <CardActionArea>\n            <CardMedia\n              component=\"img\"\n              height={150}\n              image={hit.image}\n              title={hit.name}\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                <Highlight attribute=\"name\" hit={hit} />\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                <Highlight attribute=\"description\" hit={hit} />\n              </Typography>\n              <div className=\"hit-price\">${hit.price}</div>\n            </CardContent>\n          </CardActionArea>\n        </Card>\n      </Grid>\n    ))}\n  </Grid>\n));\n\nconst Header = () => (\n  <Paper>\n    <SearchBox />\n    <VoiceSearch />\n  </Paper>\n)\n\n\nfunction App() {\n  return (\n    <InstantSearch\n      indexName=\"ejemplo_tienda\"\n      searchClient={searchClient}\n    >\n       <Header/>\n       <Container>\n          <CustomHits />\n       </Container>\n    </InstantSearch>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}